"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bttps_1 = require("./bttps");
var fallbackListData_1 = __importDefault(require("./fallbackListData"));
var legacyIdsFallbackData_1 = __importDefault(require("./legacyIdsFallbackData"));
/**
 * This is a fallback type
 * to make BLAPI compatible with typescript code that does not use discord.js
 */
var Collection = /** @class */ (function (_super) {
    __extends(Collection, _super);
    function Collection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Collection;
}(Map));
var listData = fallbackListData_1.default;
var legacyIds = legacyIdsFallbackData_1.default;
var listAge = new Date();
var extendedLogging = false;
var useBotblockAPI = true;
function convertLegacyIds(apiKeys) {
    var newApiKeys = __assign({}, apiKeys);
    Object.entries(legacyIds).forEach(function (_a) {
        var list = _a[0], newlist = _a[1];
        if (newApiKeys[list]) {
            newApiKeys[newlist] = newApiKeys[list];
            delete newApiKeys[list];
        }
    });
    return newApiKeys;
}
function buildBotblockData(apiKeys, bot_id, server_count, shard_id, shard_count, shards) {
    return __assign(__assign({}, apiKeys), { bot_id: bot_id,
        server_count: server_count,
        shard_id: shard_id,
        shard_count: shard_count,
        shards: shards });
}
/**
 * @param apiKeys A JSON object formatted like: {"botlist name":"API Keys for that list", etc.} ;
 * it also includes other metadata including sharddata
 */
function postToAllLists(apiKeys, client_id, server_count, shard_id, shard_count, shards) {
    return __awaiter(this, void 0, void 0, function () {
        var currentDate, tmpListData, e_1, tmpLegacyIdsData, e_2, posts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentDate = new Date();
                    if (!(!listData || listAge < currentDate)) return [3 /*break*/, 7];
                    // we try to update the listdata every day
                    // in case new lists are added but the code is not restarted
                    listAge.setDate(currentDate.getDate() + 1);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, bttps_1.get('https://botblock.org/api/lists?filter=true')];
                case 2:
                    tmpListData = _a.sent();
                    // make sure we only save it if nothing goes wrong
                    if (tmpListData) {
                        listData = tmpListData;
                        console.info('BLAPI : Updated list endpoints.');
                    }
                    else {
                        console.error('BLAPI : Got empty list of endpoints from botblock.');
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    console.error("BLAPI: " + e_1);
                    console.error("BLAPI : Something went wrong when contacting BotBlock for the API of the lists, so we're using an older preset. Some lists might not be available because of this.");
                    return [3 /*break*/, 4];
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, bttps_1.get('https://botblock.org/api/legacy-ids')];
                case 5:
                    tmpLegacyIdsData = _a.sent();
                    // make sure we only save it if nothing goes wrong
                    if (tmpLegacyIdsData) {
                        legacyIds = tmpLegacyIdsData;
                        console.info('BLAPI : Updated legacy Ids.');
                    }
                    else {
                        console.error('BLAPI : Got empty list of legacy Ids from botblock.');
                    }
                    return [3 /*break*/, 7];
                case 6:
                    e_2 = _a.sent();
                    console.error("BLAPI: " + e_2);
                    console.error("BLAPI : Something went wrong when contacting BotBlock for legacy Ids, so we're using an older preset. Some lists might not be available because of this.");
                    return [3 /*break*/, 7];
                case 7:
                    posts = [];
                    Object.entries(listData).forEach(function (_a) {
                        var listname = _a[0];
                        if (apiKeys[listname] && listData[listname].api_post) {
                            var list = listData[listname];
                            var apiPath = list.api_post.replace(':id', client_id);
                            var sendObj = {};
                            sendObj[list.api_field] = server_count;
                            if (shard_id && list.api_shard_id) {
                                sendObj[list.api_shard_id] = shard_id;
                            }
                            if (shard_count && list.api_shard_count) {
                                sendObj[list.api_shard_count] = shard_count;
                            }
                            if (shards && list.api_shards) {
                                sendObj[list.api_shards] = shards;
                            }
                            posts.push(bttps_1.post(apiPath, apiKeys[listname], sendObj, extendedLogging));
                        }
                    });
                    return [2 /*return*/, Promise.all(posts)];
            }
        });
    });
}
/**
 * @param client Discord.js client
 * @param apiKeys A JSON object formatted like: {"botlist name":"API Keys for that list", etc.}
 * @param repeatInterval Number of minutes between each repetition
 */
function handleInternal(client, apiKeys, repeatInterval) {
    return __awaiter(this, void 0, void 0, function () {
        var client_id, unchanged, shard_count, shards, server_count, shard_id, guildSizes, shardCounts, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    setTimeout(
                    /* eslint-disable-next-line @typescript-eslint/no-misused-promises */
                    handleInternal.bind(null, client, apiKeys, repeatInterval), 60000 * repeatInterval); // call this function again in the next interval
                    if (!client.user) return [3 /*break*/, 13];
                    client_id = client.user.id;
                    unchanged = void 0;
                    shard_count = void 0;
                    shards = void 0;
                    server_count = 0;
                    shard_id = void 0;
                    if (!(client.shard && client.shard.id === 0)) return [3 /*break*/, 5];
                    shard_count = client.shard.count;
                    shard_id = client.shard.id;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.shard.broadcastEval('this.guilds.size ? this.guilds.size : this.guilds.cache.size')];
                case 2:
                    guildSizes = _a.sent();
                    shardCounts = guildSizes.filter(function (count) { return count !== 0; });
                    if (shardCounts.length !== client.shard.count) {
                        // If not all shards are up yet, we skip this run of handleInternal
                        return [2 /*return*/];
                    }
                    server_count = shardCounts.reduce(function (prev, val) { return prev + val; }, 0);
                    return [3 /*break*/, 4];
                case 3:
                    e_3 = _a.sent();
                    console.error('BLAPI: Error while fetching shard server counts:', e_3);
                    return [3 /*break*/, 4];
                case 4: return [3 /*break*/, 6];
                case 5:
                    if (!client.shard) {
                        /*
                           else if (client.ws && client.ws.shards) {
                            apiKeys.shard_count = client.ws.shards.size;
                            // Get array of shards
                            const shardCounts:Array<number> = [];
                            client.ws.shards.forEach(shard => {
                              let count = 0;
                              client.guilds.forEach(g => {
                                if (g.shardID === shard.id) count++;
                              });
                              shardCounts.push(count);
                            });
                            if (shardCounts.length !== client.ws.shards.size) {
                              // If not all shards are up yet, we skip this run of handleInternal
                              console.log(
                                "BLAPI: Not all shards are up yet, so we're skipping this run."
                              );
                              return;
                            }
                            apiKeys.shards = shardCounts;
                            apiKeys.server_count = apiKeys.shards.reduce(
                              (prev:number, val:number) => prev + val,
                              0
                            );
                            // Check if bot is not sharded at all, but still wants to send server count
                            // (it's recommended to shard your bot, even if it's only one shard)
                          } */
                        server_count = client.guilds instanceof Map
                            ? client.guilds.size
                            : client.guilds.cache.size;
                    }
                    else {
                        unchanged = true;
                    } // nothing has changed, therefore we don't send any data
                    _a.label = 6;
                case 6:
                    if (!!unchanged) return [3 /*break*/, 12];
                    if (!(repeatInterval > 2 && useBotblockAPI)) return [3 /*break*/, 10];
                    // if the interval isnt below the BotBlock ratelimit, use their API
                    return [4 /*yield*/, bttps_1.post('https://botblock.org/api/count', 'no key needed for this', buildBotblockData(apiKeys, client_id, server_count, shard_id, shard_count, shards), extendedLogging)];
                case 7:
                    // if the interval isnt below the BotBlock ratelimit, use their API
                    _a.sent();
                    if (!apiKeys['top.gg']) return [3 /*break*/, 9];
                    return [4 /*yield*/, postToAllLists({ 'top.gg': apiKeys['top.gg'] }, client_id, server_count, shard_id, shard_count, shards)];
                case 8:
                    _a.sent();
                    _a.label = 9;
                case 9: return [3 /*break*/, 12];
                case 10: return [4 /*yield*/, postToAllLists(apiKeys, client_id, server_count, shard_id, shard_count, shards)];
                case 11:
                    _a.sent();
                    _a.label = 12;
                case 12: return [3 /*break*/, 14];
                case 13:
                    console.error("BLAPI : Discord client seems to not be connected yet, so we're skipping this run of the post. We will try again in " + repeatInterval + " minutes.");
                    _a.label = 14;
                case 14: return [2 /*return*/];
            }
        });
    });
}
/**
 * This function is for automated use with discord.js
 * @param discordClient Client via wich your code is connected to Discord
 * @param apiKeys A JSON object formatted like: {"botlist name":"API Keys for that list", etc.}
 * @param repeatInterval Number of minutes until you want to post again, leave out to use 30
 */
function handle(discordClient, apiKeys, repeatInterval) {
    return handleInternal(discordClient, convertLegacyIds(apiKeys), !repeatInterval || repeatInterval < 1 ? 30 : repeatInterval);
}
exports.handle = handle;
/**
 * For when you don't use discord.js or just want to post to manual times
 * @param guildCount Integer value of guilds your bot is serving
 * @param botID Snowflake of the ID the user your bot is using
 * @param apiKeys A JSON object formatted like: {"botlist name":"API Keys for that list", etc.}
 * @param shardID (optional) The shard ID, which will be used to identify the
 * shards valid for posting
 * (and for super efficient posting with BLAPIs own distributer when not using botBlock)
 * @param shardCount (optional) The number of shards the bot has, which is posted to the lists
 * @param shards (optional) An array of guild counts of each single shard
 *  (this should be a complete list, and only a single shard will post it)
 */
function manualPost(guildCount, botID, apiKeys, shard_id, shard_count, shards) {
    return __awaiter(this, void 0, void 0, function () {
        var updatedApiKeys, client_id, server_count, responses, _a, _b, _c, _d, _e, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    updatedApiKeys = convertLegacyIds(apiKeys);
                    client_id = botID;
                    server_count = guildCount;
                    // check if we want to use sharding
                    if (shard_id === 0 || (shard_id && !shards)) {
                        // if we don't have all the shard info in one place well try to post every shard itself
                        if (shards) {
                            if (shards.length !== shard_count) {
                                throw new Error("BLAPI: Shardcount (" + shard_count + ") does not equal the length of the shards array (" + shards.length + ").");
                            }
                            server_count = shards.reduce(function (prev, val) { return prev + val; }, 0);
                        }
                    }
                    responses = [];
                    if (!useBotblockAPI) return [3 /*break*/, 4];
                    _b = (_a = responses).push;
                    return [4 /*yield*/, bttps_1.post('https://botblock.org/api/count', 'no key needed for this', buildBotblockData(updatedApiKeys, client_id, server_count, shard_id, shard_count, shards), extendedLogging)];
                case 1:
                    _b.apply(_a, [_g.sent()]);
                    if (!updatedApiKeys['top.gg']) return [3 /*break*/, 3];
                    _d = (_c = responses).concat;
                    return [4 /*yield*/, postToAllLists({ 'top.gg': updatedApiKeys['top.gg'] }, client_id, server_count, shard_id, shard_count, shards)];
                case 2:
                    _d.apply(_c, [_g.sent()]);
                    _g.label = 3;
                case 3: return [3 /*break*/, 6];
                case 4:
                    _f = (_e = responses).concat;
                    return [4 /*yield*/, postToAllLists(updatedApiKeys, client_id, server_count, shard_id, shard_count, shards)];
                case 5:
                    _f.apply(_e, [_g.sent()]);
                    _g.label = 6;
                case 6: return [2 /*return*/, responses];
            }
        });
    });
}
exports.manualPost = manualPost;
function setLogging(setLog) {
    extendedLogging = setLog;
}
exports.setLogging = setLogging;
function setBotblock(useBotblock) {
    useBotblockAPI = useBotblock;
}
exports.setBotblock = setBotblock;
//# sourceMappingURL=blapi.js.map